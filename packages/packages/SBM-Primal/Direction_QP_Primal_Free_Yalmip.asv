function [Wstar,X_next,Gammastar,Sstar,DualFeasibility,gap,y,x_next] = Direction_QP_Primal_Free_Yalmip(yomegat,omegat,Paras,Wt,Pt,feasible)

    yalmip('clear');

    gamma = sdpvar(1);
    S     = sdpvar(Paras.MaxCols);
    y     = sdpvar(Paras.m,1);

    w     = gamma*Wt + vec(Pt*S*Pt.');
    if feasible 
        cost       =  w.'*omegat + (Paras.a.'*y - Paras.c0).'*(Paras.a.'*y - Paras.c0)/2/Paras.alphafree + (w-Paras.c_sdp+Paras.At_sdp.'*y).'*(w-Paras.c_sdp+Paras.At_sdp.'*y)/2/Paras.alpha;
    else
        cost       =  w.'*omegat + (Paras.a.'*y - Paras.c0).'*(Paras.a.'*y - Paras.c0)/2/Paras.alphafree + (w-Paras.c_sdp+Paras.At_sdp.'*y).'*(w-Paras.c_sdp+Paras.At_sdp.'*y)/2/Paras.alpha ...
                      - y.'*(Paras.b_sdp - Paras.a*yomegat-Paras.At_sdp*omegat);
    end
    constraint = [S>=0,gamma>=0, trace(S) + gamma <= Paras.rho];
    ops = sdpsettings('solver','mosek','verbose',0,'debug',1);
    optimize(constraint,cost,ops);

    y               = value(y);
    Sstar           = value(S);
    Wstar           = value(w);
    Gammastar       = value(gamma);
    X_next          = omegat  + (Wstar-Paras.c_sdp+Paras.At_sdp.'*y)/Paras.alpha;
    x_next          = yomegat + (Paras.a.'*y - Paras.c0)/Paras.alphafree;

    Paras.a
    DualFeasibility = 0;
    gap             = 0;
    
end